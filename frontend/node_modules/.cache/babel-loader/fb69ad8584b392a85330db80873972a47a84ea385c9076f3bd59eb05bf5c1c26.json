{"ast":null,"code":"// API Client for Backend Integration\nclass ApiClient {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n    this.token = localStorage.getItem('authToken');\n  }\n  setToken(token) {\n    this.token = token;\n    if (token) {\n      localStorage.setItem('authToken', token);\n    } else {\n      localStorage.removeItem('authToken');\n    }\n  }\n  getHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    return headers;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: this.getHeaders(),\n      ...options\n    };\n    try {\n      console.log(`🔍 DEBUG: baseURL = ${this.baseURL}`);\n      console.log(`🔍 DEBUG: endpoint = ${endpoint}`);\n      console.log(`🔍 DEBUG: final URL = ${url}`);\n      console.log(`Making API request to: ${url}`);\n\n      // Add timeout to fetch request\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 second timeout\n\n      const response = await fetch(url, {\n        ...config,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        let errorData = {};\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          console.warn('Failed to parse error response as JSON');\n        }\n\n        // Handle 401 Unauthorized specifically\n        if (response.status === 401) {\n          console.warn('Authentication failed - token may be expired');\n          this.setToken(null); // Clear invalid token\n          throw new Error('Could not validate credentials - please log in again');\n        }\n\n        // Handle validation errors (422)\n        if (response.status === 422 && errorData.detail) {\n          // Handle Pydantic validation errors\n          if (Array.isArray(errorData.detail)) {\n            const validationErrors = errorData.detail.map(err => `${err.loc.join('.')}: ${err.msg}`).join(', ');\n            throw new Error(`Validation Error: ${validationErrors}`);\n          } else {\n            throw new Error(errorData.detail);\n          }\n        }\n\n        // Extract error message properly\n        let errorMessage = 'Unknown error occurred';\n        if (typeof errorData === 'string') {\n          errorMessage = errorData;\n        } else if (errorData.error) {\n          errorMessage = errorData.error;\n        } else if (errorData.detail) {\n          errorMessage = errorData.detail;\n        } else if (errorData.message) {\n          errorMessage = errorData.message;\n        } else {\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        }\n        throw new Error(errorMessage);\n      }\n      const responseData = await response.json();\n      console.log(`API response from ${endpoint}:`, responseData);\n      return responseData;\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        console.error(`API request timeout for ${endpoint}`);\n        throw new Error('Request timed out - backend server may not be responding');\n      }\n      console.error(`API Error (${endpoint}):`, error);\n      throw error;\n    }\n  }\n\n  // Test connection to backend\n  async testConnection() {\n    try {\n      const response = await fetch(`${this.baseURL.replace('/api', '')}/health`);\n      return response.ok;\n    } catch (error) {\n      console.error('Backend connection test failed:', error);\n      return false;\n    }\n  }\n\n  // Authentication endpoints\n  async register(userData) {\n    return this.request('/api/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(email, password) {\n    const response = await this.request('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (response.access_token) {\n      this.setToken(response.access_token);\n    }\n    return response;\n  }\n  async getCurrentUser() {\n    return this.request('/api/auth/me');\n  }\n  async logout() {\n    this.setToken(null);\n  }\n\n  // Social Media endpoints (Replace Make.com webhooks)\n  async connectFacebook(accessToken, userId, pages = []) {\n    return this.request('/api/social/facebook/connect', {\n      method: 'POST',\n      body: JSON.stringify({\n        access_token: accessToken,\n        user_id: userId,\n        pages: pages\n      })\n    });\n  }\n  async connectInstagram(accessToken) {\n    return this.request('/api/social/instagram/connect', {\n      method: 'POST',\n      body: JSON.stringify({\n        access_token: accessToken\n      })\n    });\n  }\n\n  // REPLACE Make.com auto-post webhook\n  async createFacebookPost(pageId, message, postType = 'post-auto', image = null) {\n    return this.request('/social/facebook/post', {\n      method: 'POST',\n      body: JSON.stringify({\n        page_id: pageId,\n        message: message,\n        post_type: postType,\n        image: image\n      })\n    });\n  }\n\n  // Instagram post creation\n  async createInstagramPost(data) {\n    // Accept either FormData or an object for flexibility\n    if (data instanceof FormData) {\n      // FormData for file uploads\n      return this.request('/api/social/instagram/post', {\n        method: 'POST',\n        body: data,\n        headers: {\n          // Don't set Content-Type for FormData, let browser set it\n          'Authorization': this.token ? `Bearer ${this.token}` : undefined\n        }\n      });\n    } else {\n      // JSON for text-only posts or AI generation\n      return this.request('/api/social/instagram/post', {\n        method: 'POST',\n        body: JSON.stringify({\n          instagram_user_id: data.instagram_user_id,\n          caption: data.caption,\n          image_url: data.image_url,\n          post_type: data.post_type || 'manual',\n          use_ai: data.use_ai || false,\n          prompt: data.prompt\n        })\n      });\n    }\n  }\n\n  // Get Instagram media\n  async getInstagramMedia(instagramUserId, limit = 25) {\n    return this.request(`/api/social/instagram/media/${instagramUserId}?limit=${limit}`);\n  }\n\n  // REPLACE Make.com auto-reply webhook\n  async toggleAutoReply(pageId, enabled, responseTemplate = 'Thank you for your comment!') {\n    return this.request('/social/facebook/auto-reply', {\n      method: 'POST',\n      body: JSON.stringify({\n        enabled: enabled,\n        page_id: pageId,\n        response_template: responseTemplate\n      })\n    });\n  }\n\n  // Get connected social accounts\n  async getSocialAccounts() {\n    return this.request('/social/accounts');\n  }\n\n  // Get posts\n  async getPosts(platform = null, status = null, limit = 50) {\n    const params = new URLSearchParams();\n    if (platform) params.append('platform', platform);\n    if (status) params.append('status', status);\n    if (limit) params.append('limit', limit.toString());\n    const query = params.toString();\n    return this.request(`/social/posts${query ? `?${query}` : ''}`);\n  }\n\n  // Get automation rules\n  async getAutomationRules(platform = null, ruleType = null) {\n    const params = new URLSearchParams();\n    if (platform) params.append('platform', platform);\n    if (ruleType) params.append('rule_type', ruleType);\n    const query = params.toString();\n    return this.request(`/social/automation-rules${query ? `?${query}` : ''}`);\n  }\n\n  // Generate content using Groq API\n  async generateContent(prompt) {\n    return this.request('/ai/generate-content', {\n      method: 'POST',\n      body: JSON.stringify({\n        prompt: prompt,\n        platform: 'facebook',\n        content_type: 'post'\n      })\n    });\n  }\n}\nconst apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["ApiClient","constructor","baseURL","process","env","REACT_APP_API_URL","token","localStorage","getItem","setToken","setItem","removeItem","getHeaders","headers","request","endpoint","options","url","config","console","log","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","ok","errorData","json","e","warn","status","Error","detail","Array","isArray","validationErrors","map","err","loc","join","msg","errorMessage","error","message","statusText","responseData","name","testConnection","replace","register","userData","method","body","JSON","stringify","login","email","password","access_token","getCurrentUser","logout","connectFacebook","accessToken","userId","pages","user_id","connectInstagram","createFacebookPost","pageId","postType","image","page_id","post_type","createInstagramPost","data","FormData","undefined","instagram_user_id","caption","image_url","use_ai","prompt","getInstagramMedia","instagramUserId","limit","toggleAutoReply","enabled","responseTemplate","response_template","getSocialAccounts","getPosts","platform","params","URLSearchParams","append","toString","query","getAutomationRules","ruleType","generateContent","content_type","apiClient"],"sources":["F:/Projects/Automation Dashboard/frontend/src/services/apiClient.js"],"sourcesContent":["// API Client for Backend Integration\r\nclass ApiClient {\r\n  constructor() {\r\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n    this.token = localStorage.getItem('authToken');\r\n  }\r\n\r\n  setToken(token) {\r\n    this.token = token;\r\n    if (token) {\r\n      localStorage.setItem('authToken', token);\r\n    } else {\r\n      localStorage.removeItem('authToken');\r\n    }\r\n  }\r\n\r\n  getHeaders() {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    if (this.token) {\r\n      headers['Authorization'] = `Bearer ${this.token}`;\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    \r\n    const config = {\r\n      headers: this.getHeaders(),\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      console.log(`🔍 DEBUG: baseURL = ${this.baseURL}`);\r\n      console.log(`🔍 DEBUG: endpoint = ${endpoint}`);\r\n      console.log(`🔍 DEBUG: final URL = ${url}`);\r\n      console.log(`Making API request to: ${url}`);\r\n      \r\n      // Add timeout to fetch request\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 second timeout\r\n      \r\n      const response = await fetch(url, {\r\n        ...config,\r\n        signal: controller.signal\r\n      });\r\n      \r\n      clearTimeout(timeoutId);\r\n      \r\n      if (!response.ok) {\r\n        let errorData = {};\r\n        try {\r\n          errorData = await response.json();\r\n        } catch (e) {\r\n          console.warn('Failed to parse error response as JSON');\r\n        }\r\n        \r\n        // Handle 401 Unauthorized specifically\r\n        if (response.status === 401) {\r\n          console.warn('Authentication failed - token may be expired');\r\n          this.setToken(null); // Clear invalid token\r\n          throw new Error('Could not validate credentials - please log in again');\r\n        }\r\n        \r\n        // Handle validation errors (422)\r\n        if (response.status === 422 && errorData.detail) {\r\n          // Handle Pydantic validation errors\r\n          if (Array.isArray(errorData.detail)) {\r\n            const validationErrors = errorData.detail.map(err => \r\n              `${err.loc.join('.')}: ${err.msg}`\r\n            ).join(', ');\r\n            throw new Error(`Validation Error: ${validationErrors}`);\r\n          } else {\r\n            throw new Error(errorData.detail);\r\n          }\r\n        }\r\n        \r\n        // Extract error message properly\r\n        let errorMessage = 'Unknown error occurred';\r\n        if (typeof errorData === 'string') {\r\n          errorMessage = errorData;\r\n        } else if (errorData.error) {\r\n          errorMessage = errorData.error;\r\n        } else if (errorData.detail) {\r\n          errorMessage = errorData.detail;\r\n        } else if (errorData.message) {\r\n          errorMessage = errorData.message;\r\n        } else {\r\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\r\n        }\r\n        \r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      const responseData = await response.json();\r\n      console.log(`API response from ${endpoint}:`, responseData);\r\n      return responseData;\r\n    } catch (error) {\r\n      if (error.name === 'AbortError') {\r\n        console.error(`API request timeout for ${endpoint}`);\r\n        throw new Error('Request timed out - backend server may not be responding');\r\n      }\r\n      console.error(`API Error (${endpoint}):`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Test connection to backend\r\n  async testConnection() {\r\n    try {\r\n      const response = await fetch(`${this.baseURL.replace('/api', '')}/health`);\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('Backend connection test failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Authentication endpoints\r\n  async register(userData) {\r\n    return this.request('/api/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  }\r\n\r\n  async login(email, password) {\r\n    const response = await this.request('/api/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    \r\n    if (response.access_token) {\r\n      this.setToken(response.access_token);\r\n    }\r\n    \r\n    return response;\r\n  }\r\n\r\n  async getCurrentUser() {\r\n    return this.request('/api/auth/me');\r\n  }\r\n\r\n  async logout() {\r\n    this.setToken(null);\r\n  }\r\n\r\n  // Social Media endpoints (Replace Make.com webhooks)\r\n  async connectFacebook(accessToken, userId, pages = []) {\r\n    return this.request('/api/social/facebook/connect', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        access_token: accessToken,\r\n        user_id: userId,\r\n        pages: pages,\r\n      }),\r\n    });\r\n  }\r\n\r\n  async connectInstagram(accessToken) {\r\n    return this.request('/api/social/instagram/connect', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        access_token: accessToken\r\n      }),\r\n    });\r\n  }\r\n\r\n  // REPLACE Make.com auto-post webhook\r\n  async createFacebookPost(pageId, message, postType = 'post-auto', image = null) {\r\n    return this.request('/social/facebook/post', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        page_id: pageId,\r\n        message: message,\r\n        post_type: postType,\r\n        image: image,\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Instagram post creation\r\n  async createInstagramPost(data) {\r\n    // Accept either FormData or an object for flexibility\r\n    if (data instanceof FormData) {\r\n      // FormData for file uploads\r\n      return this.request('/api/social/instagram/post', {\r\n        method: 'POST',\r\n        body: data,\r\n        headers: {\r\n          // Don't set Content-Type for FormData, let browser set it\r\n          'Authorization': this.token ? `Bearer ${this.token}` : undefined\r\n        }\r\n      });\r\n    } else {\r\n      // JSON for text-only posts or AI generation\r\n      return this.request('/api/social/instagram/post', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          instagram_user_id: data.instagram_user_id,\r\n          caption: data.caption,\r\n          image_url: data.image_url,\r\n          post_type: data.post_type || 'manual',\r\n          use_ai: data.use_ai || false,\r\n          prompt: data.prompt\r\n        }),\r\n      });\r\n    }\r\n  }\r\n\r\n  // Get Instagram media\r\n  async getInstagramMedia(instagramUserId, limit = 25) {\r\n    return this.request(`/api/social/instagram/media/${instagramUserId}?limit=${limit}`);\r\n  }\r\n\r\n  // REPLACE Make.com auto-reply webhook\r\n  async toggleAutoReply(pageId, enabled, responseTemplate = 'Thank you for your comment!') {\r\n    return this.request('/social/facebook/auto-reply', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        enabled: enabled,\r\n        page_id: pageId,\r\n        response_template: responseTemplate,\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Get connected social accounts\r\n  async getSocialAccounts() {\r\n    return this.request('/social/accounts');\r\n  }\r\n\r\n  // Get posts\r\n  async getPosts(platform = null, status = null, limit = 50) {\r\n    const params = new URLSearchParams();\r\n    if (platform) params.append('platform', platform);\r\n    if (status) params.append('status', status);\r\n    if (limit) params.append('limit', limit.toString());\r\n    \r\n    const query = params.toString();\r\n    return this.request(`/social/posts${query ? `?${query}` : ''}`);\r\n  }\r\n\r\n  // Get automation rules\r\n  async getAutomationRules(platform = null, ruleType = null) {\r\n    const params = new URLSearchParams();\r\n    if (platform) params.append('platform', platform);\r\n    if (ruleType) params.append('rule_type', ruleType);\r\n    \r\n    const query = params.toString();\r\n    return this.request(`/social/automation-rules${query ? `?${query}` : ''}`);\r\n  }\r\n\r\n  // Generate content using Groq API\r\n  async generateContent(prompt) {\r\n    return this.request('/ai/generate-content', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        prompt: prompt,\r\n        platform: 'facebook',\r\n        content_type: 'post'\r\n      }),\r\n    });\r\n  }\r\n}\r\n\r\nconst apiClient = new ApiClient();\r\nexport default apiClient; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}