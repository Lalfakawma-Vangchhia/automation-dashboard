{"ast":null,"code":"var _jsxFileName = \"F:\\\\Projects\\\\Automation Dashboard\\\\frontend\\\\src\\\\components\\\\SocialMediaPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PlatformCard from './PlatformCard';\nimport ActivityLog from './ActivityLog';\nimport PlatformDetails from './PlatformDetails';\nimport useFacebookSDK from '../hooks/useFacebookSDK';\nimport { createSocialPlatforms, WEBHOOK_URL } from '../constants/socialPlatforms';\nimport './SocialMediaPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SocialMediaPage() {\n  _s();\n  const navigate = useNavigate();\n  const [selectedPlatform, setSelectedPlatform] = useState(null);\n  const [facebookConnected, setFacebookConnected] = useState(false);\n  const [postData, setPostData] = useState({\n    message: '',\n    image: null,\n    autoReplyComment: false,\n    autoDMResponse: false\n  });\n  const [activityLog, setActivityLog] = useState([]);\n  const [isCardFlipped, setIsCardFlipped] = useState(false);\n\n  // Initialize Facebook SDK\n  useFacebookSDK();\n  const socialPlatforms = createSocialPlatforms(facebookConnected);\n  const addActivity = (action, status) => {\n    setActivityLog(prev => [...prev, {\n      time: new Date().toLocaleString(),\n      action,\n      status\n    }]);\n  };\n  const handleFacebookConnect = () => {\n    setIsCardFlipped(true);\n  };\n  const handleFacebookLogin = async () => {\n    try {\n      // Check if Facebook SDK is loaded\n      if (!window.FB) {\n        throw new Error('Facebook SDK not loaded. Please check your internet connection and try again.');\n      }\n      console.log('Starting Facebook login process...');\n      addActivity('Initiating Facebook connection...', 'success');\n\n      // Trigger Facebook Login\n      window.FB.login(async response => {\n        console.log('Facebook login response:', response);\n        if (response.authResponse) {\n          console.log('Facebook login successful, access token:', response.authResponse.accessToken);\n          const userToken = response.authResponse.accessToken;\n          addActivity('Facebook login successful, fetching pages...', 'success');\n\n          // Get list of Pages the user manages\n          window.FB.api('/me/accounts', async res => {\n            console.log('Facebook pages response:', res);\n            if (res && res.data && res.data.length > 0) {\n              const page = res.data[0]; // first page (or let user choose later)\n              const pageId = page.id;\n              const pageAccessToken = page.access_token;\n              console.log('Selected page:', page.name, 'ID:', pageId);\n              addActivity(`Found page: ${page.name}`, 'success');\n\n              // Prepare data for Make.com webhook\n              const payload = {\n                text: postData.message || 'Connected to Facebook Page',\n                pageId,\n                token: pageAccessToken,\n                autoReplyComment: postData.autoReplyComment,\n                autoDMResponse: postData.autoDMResponse,\n                pageName: page.name\n              };\n              console.log('Sending payload to webhook:', payload);\n              addActivity('Sending data to Make.com webhook...', 'success');\n              try {\n                const webhookResponse = await fetch(WEBHOOK_URL, {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(payload)\n                });\n                console.log('Webhook response status:', webhookResponse.status);\n                console.log('Webhook response:', await webhookResponse.text());\n                if (webhookResponse.ok) {\n                  setFacebookConnected(true);\n                  setIsCardFlipped(false);\n                  addActivity('Successfully connected to Facebook and Make.com!', 'success');\n                  if (postData.message) {\n                    addActivity(`Message sent: \"${postData.message.substring(0, 50)}${postData.message.length > 50 ? '...' : ''}\"`, 'success');\n                  }\n                } else {\n                  const errorText = await webhookResponse.text();\n                  throw new Error(`Webhook failed with status ${webhookResponse.status}: ${errorText}`);\n                }\n              } catch (webhookError) {\n                console.error('Webhook error:', webhookError);\n                throw new Error(`Make.com webhook error: ${webhookError.message}`);\n              }\n            } else {\n              console.error('No pages found or error:', res);\n              if (res && res.error) {\n                throw new Error(`Facebook API error: ${res.error.message}`);\n              } else {\n                throw new Error('No Facebook pages found. You need to have a Facebook page to use this feature.');\n              }\n            }\n          });\n        } else {\n          console.error('Facebook login failed:', response);\n          if (response.error) {\n            throw new Error(`Facebook login error: ${response.error}`);\n          } else {\n            throw new Error('Facebook login was cancelled or failed');\n          }\n        }\n      }, {\n        scope: 'pages_manage_posts,pages_read_engagement,pages_show_list',\n        return_scopes: true\n      });\n    } catch (error) {\n      console.error('Facebook connection failed:', error);\n      addActivity(`Connection failed: ${error.message}`, 'error');\n    }\n  };\n  const handlePlatformConnect = platformId => {\n    if (platformId === 'facebook') {\n      handleFacebookLogin();\n    } else {\n      // Handle other platform connections\n      addActivity(`${platformId} connection initiated`, 'success');\n    }\n  };\n  const selectedPlatformData = socialPlatforms.find(p => p.id === selectedPlatform);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/'),\n        className: \"back-btn\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          children: /*#__PURE__*/_jsxDEV(\"polyline\", {\n            points: \"15,18 9,12 15,6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), \"Back to Dashboard\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-title-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"page-title\",\n          children: \"Social Media Automation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"page-subtitle\",\n          children: \"Connect and automate your social media platforms with advanced AI-powered features\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"page-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"platforms-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"platforms-grid\",\n          children: socialPlatforms.map(platform => /*#__PURE__*/_jsxDEV(PlatformCard, {\n            platform: platform,\n            isSelected: selectedPlatform === platform.id,\n            isFlipped: platform.id === 'facebook' && isCardFlipped,\n            onSelect: setSelectedPlatform,\n            onConnect: handlePlatformConnect,\n            onFlip: handleFacebookConnect,\n            postData: postData,\n            setPostData: setPostData\n          }, platform.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActivityLog, {\n        activityLog: activityLog\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), selectedPlatform && selectedPlatformData && /*#__PURE__*/_jsxDEV(PlatformDetails, {\n        platform: selectedPlatformData,\n        onClose: () => setSelectedPlatform(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(SocialMediaPage, \"QhhQKfUop3SDYjlG2ztmJGF4qng=\", false, function () {\n  return [useNavigate, useFacebookSDK];\n});\n_c = SocialMediaPage;\nexport default SocialMediaPage;\nvar _c;\n$RefreshReg$(_c, \"SocialMediaPage\");","map":{"version":3,"names":["React","useState","useNavigate","PlatformCard","ActivityLog","PlatformDetails","useFacebookSDK","createSocialPlatforms","WEBHOOK_URL","jsxDEV","_jsxDEV","SocialMediaPage","_s","navigate","selectedPlatform","setSelectedPlatform","facebookConnected","setFacebookConnected","postData","setPostData","message","image","autoReplyComment","autoDMResponse","activityLog","setActivityLog","isCardFlipped","setIsCardFlipped","socialPlatforms","addActivity","action","status","prev","time","Date","toLocaleString","handleFacebookConnect","handleFacebookLogin","window","FB","Error","console","log","login","response","authResponse","accessToken","userToken","api","res","data","length","page","pageId","id","pageAccessToken","access_token","name","payload","text","token","pageName","webhookResponse","fetch","method","headers","body","JSON","stringify","ok","substring","errorText","webhookError","error","scope","return_scopes","handlePlatformConnect","platformId","selectedPlatformData","find","p","className","children","onClick","width","height","viewBox","fill","stroke","strokeWidth","points","fileName","_jsxFileName","lineNumber","columnNumber","map","platform","isSelected","isFlipped","onSelect","onConnect","onFlip","onClose","_c","$RefreshReg$"],"sources":["F:/Projects/Automation Dashboard/frontend/src/components/SocialMediaPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport PlatformCard from './PlatformCard';\r\nimport ActivityLog from './ActivityLog';\r\nimport PlatformDetails from './PlatformDetails';\r\nimport useFacebookSDK from '../hooks/useFacebookSDK';\r\nimport { createSocialPlatforms, WEBHOOK_URL } from '../constants/socialPlatforms';\r\nimport './SocialMediaPage.css';\r\n\r\nfunction SocialMediaPage() {\r\n  const navigate = useNavigate();\r\n  const [selectedPlatform, setSelectedPlatform] = useState(null);\r\n  const [facebookConnected, setFacebookConnected] = useState(false);\r\n  const [postData, setPostData] = useState({\r\n    message: '',\r\n    image: null,\r\n    autoReplyComment: false,\r\n    autoDMResponse: false\r\n  });\r\n  const [activityLog, setActivityLog] = useState([]);\r\n  const [isCardFlipped, setIsCardFlipped] = useState(false);\r\n\r\n  // Initialize Facebook SDK\r\n  useFacebookSDK();\r\n\r\n  const socialPlatforms = createSocialPlatforms(facebookConnected);\r\n\r\n  const addActivity = (action, status) => {\r\n    setActivityLog(prev => [...prev, {\r\n      time: new Date().toLocaleString(),\r\n      action,\r\n      status\r\n    }]);\r\n  };\r\n\r\n  const handleFacebookConnect = () => {\r\n    setIsCardFlipped(true);\r\n  };\r\n\r\n  const handleFacebookLogin = async () => {\r\n    try {\r\n      // Check if Facebook SDK is loaded\r\n      if (!window.FB) {\r\n        throw new Error('Facebook SDK not loaded. Please check your internet connection and try again.');\r\n      }\r\n\r\n      console.log('Starting Facebook login process...');\r\n      addActivity('Initiating Facebook connection...', 'success');\r\n\r\n      // Trigger Facebook Login\r\n      window.FB.login(\r\n        async (response) => {\r\n          console.log('Facebook login response:', response);\r\n          \r\n          if (response.authResponse) {\r\n            console.log('Facebook login successful, access token:', response.authResponse.accessToken);\r\n            const userToken = response.authResponse.accessToken;\r\n            \r\n            addActivity('Facebook login successful, fetching pages...', 'success');\r\n  \r\n            // Get list of Pages the user manages\r\n            window.FB.api('/me/accounts', async (res) => {\r\n              console.log('Facebook pages response:', res);\r\n              \r\n              if (res && res.data && res.data.length > 0) {\r\n                const page = res.data[0]; // first page (or let user choose later)\r\n                const pageId = page.id;\r\n                const pageAccessToken = page.access_token;\r\n                \r\n                console.log('Selected page:', page.name, 'ID:', pageId);\r\n                addActivity(`Found page: ${page.name}`, 'success');\r\n  \r\n                // Prepare data for Make.com webhook\r\n                const payload = {\r\n                  text: postData.message || 'Connected to Facebook Page',\r\n                  pageId,\r\n                  token: pageAccessToken,\r\n                  autoReplyComment: postData.autoReplyComment,\r\n                  autoDMResponse: postData.autoDMResponse,\r\n                  pageName: page.name\r\n                };\r\n\r\n                console.log('Sending payload to webhook:', payload);\r\n                addActivity('Sending data to Make.com webhook...', 'success');\r\n  \r\n                try {\r\n                  const webhookResponse = await fetch(WEBHOOK_URL, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                      'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(payload),\r\n                  });\r\n\r\n                  console.log('Webhook response status:', webhookResponse.status);\r\n                  console.log('Webhook response:', await webhookResponse.text());\r\n  \r\n                  if (webhookResponse.ok) {\r\n                    setFacebookConnected(true);\r\n                    setIsCardFlipped(false);\r\n                    addActivity('Successfully connected to Facebook and Make.com!', 'success');\r\n                    if (postData.message) {\r\n                      addActivity(`Message sent: \"${postData.message.substring(0, 50)}${postData.message.length > 50 ? '...' : ''}\"`, 'success');\r\n                    }\r\n                  } else {\r\n                    const errorText = await webhookResponse.text();\r\n                    throw new Error(`Webhook failed with status ${webhookResponse.status}: ${errorText}`);\r\n                  }\r\n                } catch (webhookError) {\r\n                  console.error('Webhook error:', webhookError);\r\n                  throw new Error(`Make.com webhook error: ${webhookError.message}`);\r\n                }\r\n              } else {\r\n                console.error('No pages found or error:', res);\r\n                if (res && res.error) {\r\n                  throw new Error(`Facebook API error: ${res.error.message}`);\r\n                } else {\r\n                  throw new Error('No Facebook pages found. You need to have a Facebook page to use this feature.');\r\n                }\r\n              }\r\n            });\r\n          } else {\r\n            console.error('Facebook login failed:', response);\r\n            if (response.error) {\r\n              throw new Error(`Facebook login error: ${response.error}`);\r\n            } else {\r\n              throw new Error('Facebook login was cancelled or failed');\r\n            }\r\n          }\r\n        },\r\n        { \r\n          scope: 'pages_manage_posts,pages_read_engagement,pages_show_list',\r\n          return_scopes: true\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error('Facebook connection failed:', error);\r\n      addActivity(`Connection failed: ${error.message}`, 'error');\r\n    }\r\n  };\r\n  \r\n  const handlePlatformConnect = (platformId) => {\r\n    if (platformId === 'facebook') {\r\n      handleFacebookLogin();\r\n    } else {\r\n      // Handle other platform connections\r\n      addActivity(`${platformId} connection initiated`, 'success');\r\n    }\r\n  };\r\n\r\n  const selectedPlatformData = socialPlatforms.find(p => p.id === selectedPlatform);\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <header className=\"page-header\">\r\n        <button onClick={() => navigate('/')} className=\"back-btn\">\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <polyline points=\"15,18 9,12 15,6\"></polyline>\r\n          </svg>\r\n          Back to Dashboard\r\n        </button>\r\n        <div className=\"page-title-section\">\r\n          <h1 className=\"page-title\">Social Media Automation</h1>\r\n          <p className=\"page-subtitle\">Connect and automate your social media platforms with advanced AI-powered features</p>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"page-main\">\r\n        <div className=\"platforms-container\">\r\n          <div className=\"platforms-grid\">\r\n            {socialPlatforms.map((platform) => (\r\n              <PlatformCard\r\n                key={platform.id}\r\n                platform={platform}\r\n                isSelected={selectedPlatform === platform.id}\r\n                isFlipped={platform.id === 'facebook' && isCardFlipped}\r\n                onSelect={setSelectedPlatform}\r\n                onConnect={handlePlatformConnect}\r\n                onFlip={handleFacebookConnect}\r\n                postData={postData}\r\n                setPostData={setPostData}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <ActivityLog activityLog={activityLog} />\r\n\r\n        {selectedPlatform && selectedPlatformData && (\r\n          <PlatformDetails\r\n            platform={selectedPlatformData}\r\n            onClose={() => setSelectedPlatform(null)}\r\n          />\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SocialMediaPage; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,cAAc,MAAM,yBAAyB;AACpD,SAASC,qBAAqB,EAAEC,WAAW,QAAQ,8BAA8B;AACjF,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACe,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC;IACvCmB,OAAO,EAAE,EAAE;IACXC,KAAK,EAAE,IAAI;IACXC,gBAAgB,EAAE,KAAK;IACvBC,cAAc,EAAE;EAClB,CAAC,CAAC;EACF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACyB,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACAK,cAAc,CAAC,CAAC;EAEhB,MAAMsB,eAAe,GAAGrB,qBAAqB,CAACS,iBAAiB,CAAC;EAEhE,MAAMa,WAAW,GAAGA,CAACC,MAAM,EAAEC,MAAM,KAAK;IACtCN,cAAc,CAACO,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAC/BC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC;MACjCL,MAAM;MACNC;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMK,qBAAqB,GAAGA,CAAA,KAAM;IAClCT,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAMU,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF;MACA,IAAI,CAACC,MAAM,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,+EAA+E,CAAC;MAClG;MAEAC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjDb,WAAW,CAAC,mCAAmC,EAAE,SAAS,CAAC;;MAE3D;MACAS,MAAM,CAACC,EAAE,CAACI,KAAK,CACb,MAAOC,QAAQ,IAAK;QAClBH,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEE,QAAQ,CAAC;QAEjD,IAAIA,QAAQ,CAACC,YAAY,EAAE;UACzBJ,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEE,QAAQ,CAACC,YAAY,CAACC,WAAW,CAAC;UAC1F,MAAMC,SAAS,GAAGH,QAAQ,CAACC,YAAY,CAACC,WAAW;UAEnDjB,WAAW,CAAC,8CAA8C,EAAE,SAAS,CAAC;;UAEtE;UACAS,MAAM,CAACC,EAAE,CAACS,GAAG,CAAC,cAAc,EAAE,MAAOC,GAAG,IAAK;YAC3CR,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEO,GAAG,CAAC;YAE5C,IAAIA,GAAG,IAAIA,GAAG,CAACC,IAAI,IAAID,GAAG,CAACC,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;cAC1C,MAAMC,IAAI,GAAGH,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;cAC1B,MAAMG,MAAM,GAAGD,IAAI,CAACE,EAAE;cACtB,MAAMC,eAAe,GAAGH,IAAI,CAACI,YAAY;cAEzCf,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEU,IAAI,CAACK,IAAI,EAAE,KAAK,EAAEJ,MAAM,CAAC;cACvDxB,WAAW,CAAC,eAAeuB,IAAI,CAACK,IAAI,EAAE,EAAE,SAAS,CAAC;;cAElD;cACA,MAAMC,OAAO,GAAG;gBACdC,IAAI,EAAEzC,QAAQ,CAACE,OAAO,IAAI,4BAA4B;gBACtDiC,MAAM;gBACNO,KAAK,EAAEL,eAAe;gBACtBjC,gBAAgB,EAAEJ,QAAQ,CAACI,gBAAgB;gBAC3CC,cAAc,EAAEL,QAAQ,CAACK,cAAc;gBACvCsC,QAAQ,EAAET,IAAI,CAACK;cACjB,CAAC;cAEDhB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEgB,OAAO,CAAC;cACnD7B,WAAW,CAAC,qCAAqC,EAAE,SAAS,CAAC;cAE7D,IAAI;gBACF,MAAMiC,eAAe,GAAG,MAAMC,KAAK,CAACvD,WAAW,EAAE;kBAC/CwD,MAAM,EAAE,MAAM;kBACdC,OAAO,EAAE;oBACP,cAAc,EAAE;kBAClB,CAAC;kBACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,OAAO;gBAC9B,CAAC,CAAC;gBAEFjB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEoB,eAAe,CAAC/B,MAAM,CAAC;gBAC/DU,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE,MAAMoB,eAAe,CAACH,IAAI,CAAC,CAAC,CAAC;gBAE9D,IAAIG,eAAe,CAACO,EAAE,EAAE;kBACtBpD,oBAAoB,CAAC,IAAI,CAAC;kBAC1BU,gBAAgB,CAAC,KAAK,CAAC;kBACvBE,WAAW,CAAC,kDAAkD,EAAE,SAAS,CAAC;kBAC1E,IAAIX,QAAQ,CAACE,OAAO,EAAE;oBACpBS,WAAW,CAAC,kBAAkBX,QAAQ,CAACE,OAAO,CAACkD,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAGpD,QAAQ,CAACE,OAAO,CAAC+B,MAAM,GAAG,EAAE,GAAG,KAAK,GAAG,EAAE,GAAG,EAAE,SAAS,CAAC;kBAC5H;gBACF,CAAC,MAAM;kBACL,MAAMoB,SAAS,GAAG,MAAMT,eAAe,CAACH,IAAI,CAAC,CAAC;kBAC9C,MAAM,IAAInB,KAAK,CAAC,8BAA8BsB,eAAe,CAAC/B,MAAM,KAAKwC,SAAS,EAAE,CAAC;gBACvF;cACF,CAAC,CAAC,OAAOC,YAAY,EAAE;gBACrB/B,OAAO,CAACgC,KAAK,CAAC,gBAAgB,EAAED,YAAY,CAAC;gBAC7C,MAAM,IAAIhC,KAAK,CAAC,2BAA2BgC,YAAY,CAACpD,OAAO,EAAE,CAAC;cACpE;YACF,CAAC,MAAM;cACLqB,OAAO,CAACgC,KAAK,CAAC,0BAA0B,EAAExB,GAAG,CAAC;cAC9C,IAAIA,GAAG,IAAIA,GAAG,CAACwB,KAAK,EAAE;gBACpB,MAAM,IAAIjC,KAAK,CAAC,uBAAuBS,GAAG,CAACwB,KAAK,CAACrD,OAAO,EAAE,CAAC;cAC7D,CAAC,MAAM;gBACL,MAAM,IAAIoB,KAAK,CAAC,gFAAgF,CAAC;cACnG;YACF;UACF,CAAC,CAAC;QACJ,CAAC,MAAM;UACLC,OAAO,CAACgC,KAAK,CAAC,wBAAwB,EAAE7B,QAAQ,CAAC;UACjD,IAAIA,QAAQ,CAAC6B,KAAK,EAAE;YAClB,MAAM,IAAIjC,KAAK,CAAC,yBAAyBI,QAAQ,CAAC6B,KAAK,EAAE,CAAC;UAC5D,CAAC,MAAM;YACL,MAAM,IAAIjC,KAAK,CAAC,wCAAwC,CAAC;UAC3D;QACF;MACF,CAAC,EACD;QACEkC,KAAK,EAAE,0DAA0D;QACjEC,aAAa,EAAE;MACjB,CACF,CAAC;IACH,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdhC,OAAO,CAACgC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD5C,WAAW,CAAC,sBAAsB4C,KAAK,CAACrD,OAAO,EAAE,EAAE,OAAO,CAAC;IAC7D;EACF,CAAC;EAED,MAAMwD,qBAAqB,GAAIC,UAAU,IAAK;IAC5C,IAAIA,UAAU,KAAK,UAAU,EAAE;MAC7BxC,mBAAmB,CAAC,CAAC;IACvB,CAAC,MAAM;MACL;MACAR,WAAW,CAAC,GAAGgD,UAAU,uBAAuB,EAAE,SAAS,CAAC;IAC9D;EACF,CAAC;EAED,MAAMC,oBAAoB,GAAGlD,eAAe,CAACmD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC1B,EAAE,KAAKxC,gBAAgB,CAAC;EAEjF,oBACEJ,OAAA;IAAKuE,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BxE,OAAA;MAAQuE,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC7BxE,OAAA;QAAQyE,OAAO,EAAEA,CAAA,KAAMtE,QAAQ,CAAC,GAAG,CAAE;QAACoE,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACxDxE,OAAA;UAAK0E,KAAK,EAAC,IAAI;UAACC,MAAM,EAAC,IAAI;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAAAP,QAAA,eAC/FxE,OAAA;YAAUgF,MAAM,EAAC;UAAiB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CAAC,qBAER;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTpF,OAAA;QAAKuE,SAAS,EAAC,oBAAoB;QAAAC,QAAA,gBACjCxE,OAAA;UAAIuE,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAuB;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvDpF,OAAA;UAAGuE,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAC;QAAkF;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAETpF,OAAA;MAAMuE,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACzBxE,OAAA;QAAKuE,SAAS,EAAC,qBAAqB;QAAAC,QAAA,eAClCxE,OAAA;UAAKuE,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAC5BtD,eAAe,CAACmE,GAAG,CAAEC,QAAQ,iBAC5BtF,OAAA,CAACP,YAAY;YAEX6F,QAAQ,EAAEA,QAAS;YACnBC,UAAU,EAAEnF,gBAAgB,KAAKkF,QAAQ,CAAC1C,EAAG;YAC7C4C,SAAS,EAAEF,QAAQ,CAAC1C,EAAE,KAAK,UAAU,IAAI5B,aAAc;YACvDyE,QAAQ,EAAEpF,mBAAoB;YAC9BqF,SAAS,EAAExB,qBAAsB;YACjCyB,MAAM,EAAEjE,qBAAsB;YAC9BlB,QAAQ,EAAEA,QAAS;YACnBC,WAAW,EAAEA;UAAY,GARpB6E,QAAQ,CAAC1C,EAAE;YAAAqC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OASjB,CACF;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENpF,OAAA,CAACN,WAAW;QAACoB,WAAW,EAAEA;MAAY;QAAAmE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAExChF,gBAAgB,IAAIgE,oBAAoB,iBACvCpE,OAAA,CAACL,eAAe;QACd2F,QAAQ,EAAElB,oBAAqB;QAC/BwB,OAAO,EAAEA,CAAA,KAAMvF,mBAAmB,CAAC,IAAI;MAAE;QAAA4E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C,CACF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAClF,EAAA,CA5LQD,eAAe;EAAA,QACLT,WAAW,EAa5BI,cAAc;AAAA;AAAAiG,EAAA,GAdP5F,eAAe;AA8LxB,eAAeA,eAAe;AAAC,IAAA4F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}