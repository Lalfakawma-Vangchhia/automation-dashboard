{"ast":null,"code":"// API Client for Backend Integration\nclass ApiClient {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n    this.token = localStorage.getItem('authToken');\n  }\n  setToken(token) {\n    this.token = token;\n    if (token) {\n      localStorage.setItem('authToken', token);\n    } else {\n      localStorage.removeItem('authToken');\n    }\n  }\n  getHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    return headers;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: this.getHeaders(),\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n\n        // Handle 401 Unauthorized specifically\n        if (response.status === 401) {\n          console.warn('Authentication failed - token may be expired');\n          this.setToken(null); // Clear invalid token\n          throw new Error('Could not validate credentials - please log in again');\n        }\n        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`API Error (${endpoint}):`, error);\n      throw error;\n    }\n  }\n\n  // Authentication endpoints\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(email, password) {\n    const response = await this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (response.access_token) {\n      this.setToken(response.access_token);\n    }\n    return response;\n  }\n  async getCurrentUser() {\n    return this.request('/auth/me');\n  }\n  async logout() {\n    this.setToken(null);\n  }\n\n  // Social Media endpoints (Replace Make.com webhooks)\n  async connectFacebook(accessToken, userId, pages = []) {\n    return this.request('/social/facebook/connect', {\n      method: 'POST',\n      body: JSON.stringify({\n        access_token: accessToken,\n        user_id: userId,\n        pages: pages\n      })\n    });\n  }\n\n  // REPLACE Make.com auto-post webhook\n  async createFacebookPost(pageId, message, postType = 'post-auto', image = null) {\n    return this.request('/social/facebook/post', {\n      method: 'POST',\n      body: JSON.stringify({\n        page_id: pageId,\n        message: message,\n        post_type: postType,\n        image: image\n      })\n    });\n  }\n\n  // REPLACE Make.com auto-reply webhook\n  async toggleAutoReply(pageId, enabled, responseTemplate = 'Thank you for your comment!') {\n    return this.request('/social/facebook/auto-reply', {\n      method: 'POST',\n      body: JSON.stringify({\n        enabled: enabled,\n        page_id: pageId,\n        response_template: responseTemplate\n      })\n    });\n  }\n\n  // Get connected social accounts\n  async getSocialAccounts() {\n    return this.request('/social/accounts');\n  }\n\n  // Get posts\n  async getPosts(platform = null, status = null, limit = 50) {\n    const params = new URLSearchParams();\n    if (platform) params.append('platform', platform);\n    if (status) params.append('status', status);\n    if (limit) params.append('limit', limit.toString());\n    const query = params.toString();\n    return this.request(`/social/posts${query ? `?${query}` : ''}`);\n  }\n\n  // Get automation rules\n  async getAutomationRules(platform = null, ruleType = null) {\n    const params = new URLSearchParams();\n    if (platform) params.append('platform', platform);\n    if (ruleType) params.append('rule_type', ruleType);\n    const query = params.toString();\n    return this.request(`/social/automation-rules${query ? `?${query}` : ''}`);\n  }\n\n  // Generate content using Groq API\n  async generateContent(prompt) {\n    return this.request('/ai/generate-content', {\n      method: 'POST',\n      body: JSON.stringify({\n        prompt: prompt,\n        platform: 'facebook',\n        content_type: 'post'\n      })\n    });\n  }\n}\nconst apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["ApiClient","constructor","baseURL","process","env","REACT_APP_API_URL","token","localStorage","getItem","setToken","setItem","removeItem","getHeaders","headers","request","endpoint","options","url","config","response","fetch","ok","errorData","json","catch","status","console","warn","Error","detail","statusText","error","register","userData","method","body","JSON","stringify","login","email","password","access_token","getCurrentUser","logout","connectFacebook","accessToken","userId","pages","user_id","createFacebookPost","pageId","message","postType","image","page_id","post_type","toggleAutoReply","enabled","responseTemplate","response_template","getSocialAccounts","getPosts","platform","limit","params","URLSearchParams","append","toString","query","getAutomationRules","ruleType","generateContent","prompt","content_type","apiClient"],"sources":["F:/Projects/Automation Dashboard/frontend/src/services/apiClient.js"],"sourcesContent":["// API Client for Backend Integration\r\nclass ApiClient {\r\n  constructor() {\r\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n    this.token = localStorage.getItem('authToken');\r\n  }\r\n\r\n  setToken(token) {\r\n    this.token = token;\r\n    if (token) {\r\n      localStorage.setItem('authToken', token);\r\n    } else {\r\n      localStorage.removeItem('authToken');\r\n    }\r\n  }\r\n\r\n  getHeaders() {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    if (this.token) {\r\n      headers['Authorization'] = `Bearer ${this.token}`;\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    \r\n    const config = {\r\n      headers: this.getHeaders(),\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        \r\n        // Handle 401 Unauthorized specifically\r\n        if (response.status === 401) {\r\n          console.warn('Authentication failed - token may be expired');\r\n          this.setToken(null); // Clear invalid token\r\n          throw new Error('Could not validate credentials - please log in again');\r\n        }\r\n        \r\n        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`API Error (${endpoint}):`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Authentication endpoints\r\n  async register(userData) {\r\n    return this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  }\r\n\r\n  async login(email, password) {\r\n    const response = await this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    \r\n    if (response.access_token) {\r\n      this.setToken(response.access_token);\r\n    }\r\n    \r\n    return response;\r\n  }\r\n\r\n  async getCurrentUser() {\r\n    return this.request('/auth/me');\r\n  }\r\n\r\n  async logout() {\r\n    this.setToken(null);\r\n  }\r\n\r\n  // Social Media endpoints (Replace Make.com webhooks)\r\n  async connectFacebook(accessToken, userId, pages = []) {\r\n    return this.request('/social/facebook/connect', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        access_token: accessToken,\r\n        user_id: userId,\r\n        pages: pages,\r\n      }),\r\n    });\r\n  }\r\n\r\n  // REPLACE Make.com auto-post webhook\r\n  async createFacebookPost(pageId, message, postType = 'post-auto', image = null) {\r\n    return this.request('/social/facebook/post', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        page_id: pageId,\r\n        message: message,\r\n        post_type: postType,\r\n        image: image,\r\n      }),\r\n    });\r\n  }\r\n\r\n  // REPLACE Make.com auto-reply webhook\r\n  async toggleAutoReply(pageId, enabled, responseTemplate = 'Thank you for your comment!') {\r\n    return this.request('/social/facebook/auto-reply', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        enabled: enabled,\r\n        page_id: pageId,\r\n        response_template: responseTemplate,\r\n      }),\r\n    });\r\n  }\r\n\r\n  // Get connected social accounts\r\n  async getSocialAccounts() {\r\n    return this.request('/social/accounts');\r\n  }\r\n\r\n  // Get posts\r\n  async getPosts(platform = null, status = null, limit = 50) {\r\n    const params = new URLSearchParams();\r\n    if (platform) params.append('platform', platform);\r\n    if (status) params.append('status', status);\r\n    if (limit) params.append('limit', limit.toString());\r\n    \r\n    const query = params.toString();\r\n    return this.request(`/social/posts${query ? `?${query}` : ''}`);\r\n  }\r\n\r\n  // Get automation rules\r\n  async getAutomationRules(platform = null, ruleType = null) {\r\n    const params = new URLSearchParams();\r\n    if (platform) params.append('platform', platform);\r\n    if (ruleType) params.append('rule_type', ruleType);\r\n    \r\n    const query = params.toString();\r\n    return this.request(`/social/automation-rules${query ? `?${query}` : ''}`);\r\n  }\r\n\r\n  // Generate content using Groq API\r\n  async generateContent(prompt) {\r\n    return this.request('/ai/generate-content', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        prompt: prompt,\r\n        platform: 'facebook',\r\n        content_type: 'post'\r\n      }),\r\n    });\r\n  }\r\n}\r\n\r\nconst apiClient = new ApiClient();\r\nexport default apiClient; "],"mappings":"AAAA;AACA,MAAMA,SAAS,CAAC;EACdC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;IAC3E,IAAI,CAACC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAChD;EAEAC,QAAQA,CAACH,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAIA,KAAK,EAAE;MACTC,YAAY,CAACG,OAAO,CAAC,WAAW,EAAEJ,KAAK,CAAC;IAC1C,CAAC,MAAM;MACLC,YAAY,CAACI,UAAU,CAAC,WAAW,CAAC;IACtC;EACF;EAEAC,UAAUA,CAAA,EAAG;IACX,MAAMC,OAAO,GAAG;MACd,cAAc,EAAE;IAClB,CAAC;IAED,IAAI,IAAI,CAACP,KAAK,EAAE;MACdO,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,IAAI,CAACP,KAAK,EAAE;IACnD;IAEA,OAAOO,OAAO;EAChB;EAEA,MAAMC,OAAOA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACf,OAAO,GAAGa,QAAQ,EAAE;IAExC,MAAMG,MAAM,GAAG;MACbL,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC,CAAC;MAC1B,GAAGI;IACL,CAAC;IAED,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAEC,MAAM,CAAC;MAEzC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;QAEzD;QACA,IAAIL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;UAC3BC,OAAO,CAACC,IAAI,CAAC,8CAA8C,CAAC;UAC5D,IAAI,CAAClB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;UACrB,MAAM,IAAImB,KAAK,CAAC,sDAAsD,CAAC;QACzE;QAEA,MAAM,IAAIA,KAAK,CAACN,SAAS,CAACO,MAAM,IAAI,QAAQV,QAAQ,CAACM,MAAM,KAAKN,QAAQ,CAACW,UAAU,EAAE,CAAC;MACxF;MAEA,OAAO,MAAMX,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,cAAchB,QAAQ,IAAI,EAAEgB,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMC,QAAQA,CAACC,QAAQ,EAAE;IACvB,OAAO,IAAI,CAACnB,OAAO,CAAC,gBAAgB,EAAE;MACpCoB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ;IAC/B,CAAC,CAAC;EACJ;EAEA,MAAMK,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3B,MAAMrB,QAAQ,GAAG,MAAM,IAAI,CAACL,OAAO,CAAC,aAAa,EAAE;MACjDoB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEE,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAIrB,QAAQ,CAACsB,YAAY,EAAE;MACzB,IAAI,CAAChC,QAAQ,CAACU,QAAQ,CAACsB,YAAY,CAAC;IACtC;IAEA,OAAOtB,QAAQ;EACjB;EAEA,MAAMuB,cAAcA,CAAA,EAAG;IACrB,OAAO,IAAI,CAAC5B,OAAO,CAAC,UAAU,CAAC;EACjC;EAEA,MAAM6B,MAAMA,CAAA,EAAG;IACb,IAAI,CAAClC,QAAQ,CAAC,IAAI,CAAC;EACrB;;EAEA;EACA,MAAMmC,eAAeA,CAACC,WAAW,EAAEC,MAAM,EAAEC,KAAK,GAAG,EAAE,EAAE;IACrD,OAAO,IAAI,CAACjC,OAAO,CAAC,0BAA0B,EAAE;MAC9CoB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBI,YAAY,EAAEI,WAAW;QACzBG,OAAO,EAAEF,MAAM;QACfC,KAAK,EAAEA;MACT,CAAC;IACH,CAAC,CAAC;EACJ;;EAEA;EACA,MAAME,kBAAkBA,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,GAAG,WAAW,EAAEC,KAAK,GAAG,IAAI,EAAE;IAC9E,OAAO,IAAI,CAACvC,OAAO,CAAC,uBAAuB,EAAE;MAC3CoB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBiB,OAAO,EAAEJ,MAAM;QACfC,OAAO,EAAEA,OAAO;QAChBI,SAAS,EAAEH,QAAQ;QACnBC,KAAK,EAAEA;MACT,CAAC;IACH,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMG,eAAeA,CAACN,MAAM,EAAEO,OAAO,EAAEC,gBAAgB,GAAG,6BAA6B,EAAE;IACvF,OAAO,IAAI,CAAC5C,OAAO,CAAC,6BAA6B,EAAE;MACjDoB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBoB,OAAO,EAAEA,OAAO;QAChBH,OAAO,EAAEJ,MAAM;QACfS,iBAAiB,EAAED;MACrB,CAAC;IACH,CAAC,CAAC;EACJ;;EAEA;EACA,MAAME,iBAAiBA,CAAA,EAAG;IACxB,OAAO,IAAI,CAAC9C,OAAO,CAAC,kBAAkB,CAAC;EACzC;;EAEA;EACA,MAAM+C,QAAQA,CAACC,QAAQ,GAAG,IAAI,EAAErC,MAAM,GAAG,IAAI,EAAEsC,KAAK,GAAG,EAAE,EAAE;IACzD,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIH,QAAQ,EAAEE,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;IACjD,IAAIrC,MAAM,EAAEuC,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAEzC,MAAM,CAAC;IAC3C,IAAIsC,KAAK,EAAEC,MAAM,CAACE,MAAM,CAAC,OAAO,EAAEH,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC;IAEnD,MAAMC,KAAK,GAAGJ,MAAM,CAACG,QAAQ,CAAC,CAAC;IAC/B,OAAO,IAAI,CAACrD,OAAO,CAAC,gBAAgBsD,KAAK,GAAG,IAAIA,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC;EACjE;;EAEA;EACA,MAAMC,kBAAkBA,CAACP,QAAQ,GAAG,IAAI,EAAEQ,QAAQ,GAAG,IAAI,EAAE;IACzD,MAAMN,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIH,QAAQ,EAAEE,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;IACjD,IAAIQ,QAAQ,EAAEN,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEI,QAAQ,CAAC;IAElD,MAAMF,KAAK,GAAGJ,MAAM,CAACG,QAAQ,CAAC,CAAC;IAC/B,OAAO,IAAI,CAACrD,OAAO,CAAC,2BAA2BsD,KAAK,GAAG,IAAIA,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC;EAC5E;;EAEA;EACA,MAAMG,eAAeA,CAACC,MAAM,EAAE;IAC5B,OAAO,IAAI,CAAC1D,OAAO,CAAC,sBAAsB,EAAE;MAC1CoB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBmC,MAAM,EAAEA,MAAM;QACdV,QAAQ,EAAE,UAAU;QACpBW,YAAY,EAAE;MAChB,CAAC;IACH,CAAC,CAAC;EACJ;AACF;AAEA,MAAMC,SAAS,GAAG,IAAI1E,SAAS,CAAC,CAAC;AACjC,eAAe0E,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}