{"ast":null,"code":"var _jsxFileName = \"F:\\\\Projects\\\\Automation Dashboard\\\\frontend\\\\src\\\\components\\\\SocialMediaPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PlatformCard from './PlatformCard';\nimport ActivityLog from './ActivityLog';\nimport PlatformDetails from './PlatformDetails';\nimport useFacebookSDK from '../hooks/useFacebookSDK';\nimport { createSocialPlatforms, WEBHOOK_URL } from '../constants/socialPlatforms';\nimport './SocialMediaPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SocialMediaPage() {\n  _s();\n  const navigate = useNavigate();\n  const [selectedPlatform, setSelectedPlatform] = useState(null);\n  const [facebookConnected, setFacebookConnected] = useState(false);\n  const [postData, setPostData] = useState({\n    message: '',\n    image: null,\n    autoReplyComment: false,\n    autoDMResponse: false\n  });\n  const [activityLog, setActivityLog] = useState([]);\n  const [isCardFlipped, setIsCardFlipped] = useState(false);\n\n  // Initialize Facebook SDK\n  useFacebookSDK();\n  const socialPlatforms = createSocialPlatforms(facebookConnected);\n  const addActivity = (action, status) => {\n    setActivityLog(prev => [...prev, {\n      time: new Date().toLocaleString(),\n      action,\n      status\n    }]);\n  };\n  const handleFacebookConnect = () => {\n    setIsCardFlipped(true);\n  };\n  const handleFacebookLogin = async () => {\n    try {\n      const connectData = new FormData();\n      connectData.append('action', 'connect_facebook');\n      connectData.append('platform', 'facebook');\n      const webhookResponse = await fetch(WEBHOOK_URL, {\n        method: 'POST',\n        body: connectData\n      });\n      if (webhookResponse.ok) {\n        setFacebookConnected(true);\n        setIsCardFlipped(false);\n        addActivity('Connected to Facebook via Make.com webhook', 'success');\n      } else {\n        throw new Error('Webhook connection failed');\n      }\n    } catch (error) {\n      console.error('Facebook connection failed:', error);\n      addActivity('Facebook connection failed', 'error');\n    }\n  };\n  const handlePlatformConnect = platformId => {\n    if (platformId === 'facebook') {\n      handleFacebookLogin();\n    } else {\n      // Handle other platform connections\n      addActivity(`${platformId} connection initiated`, 'success');\n    }\n  };\n  const selectedPlatformData = socialPlatforms.find(p => p.id === selectedPlatform);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/'),\n        className: \"back-btn\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          children: /*#__PURE__*/_jsxDEV(\"polyline\", {\n            points: \"15,18 9,12 15,6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), \"Back to Dashboard\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-title-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"page-title\",\n          children: \"Social Media Automation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"page-subtitle\",\n          children: \"Connect and automate your social media platforms with advanced AI-powered features\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"page-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"platforms-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"platforms-grid\",\n          children: socialPlatforms.map(platform => /*#__PURE__*/_jsxDEV(PlatformCard, {\n            platform: platform,\n            isSelected: selectedPlatform === platform.id,\n            isFlipped: platform.id === 'facebook' && isCardFlipped,\n            onSelect: setSelectedPlatform,\n            onConnect: handlePlatformConnect,\n            onFlip: handleFacebookConnect,\n            postData: postData,\n            setPostData: setPostData\n          }, platform.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActivityLog, {\n        activityLog: activityLog\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), selectedPlatform && selectedPlatformData && /*#__PURE__*/_jsxDEV(PlatformDetails, {\n        platform: selectedPlatformData,\n        onClose: () => setSelectedPlatform(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(SocialMediaPage, \"QhhQKfUop3SDYjlG2ztmJGF4qng=\", false, function () {\n  return [useNavigate, useFacebookSDK];\n});\n_c = SocialMediaPage;\nexport default SocialMediaPage;\nvar _c;\n$RefreshReg$(_c, \"SocialMediaPage\");","map":{"version":3,"names":["React","useState","useNavigate","PlatformCard","ActivityLog","PlatformDetails","useFacebookSDK","createSocialPlatforms","WEBHOOK_URL","jsxDEV","_jsxDEV","SocialMediaPage","_s","navigate","selectedPlatform","setSelectedPlatform","facebookConnected","setFacebookConnected","postData","setPostData","message","image","autoReplyComment","autoDMResponse","activityLog","setActivityLog","isCardFlipped","setIsCardFlipped","socialPlatforms","addActivity","action","status","prev","time","Date","toLocaleString","handleFacebookConnect","handleFacebookLogin","connectData","FormData","append","webhookResponse","fetch","method","body","ok","Error","error","console","handlePlatformConnect","platformId","selectedPlatformData","find","p","id","className","children","onClick","width","height","viewBox","fill","stroke","strokeWidth","points","fileName","_jsxFileName","lineNumber","columnNumber","map","platform","isSelected","isFlipped","onSelect","onConnect","onFlip","onClose","_c","$RefreshReg$"],"sources":["F:/Projects/Automation Dashboard/frontend/src/components/SocialMediaPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport PlatformCard from './PlatformCard';\r\nimport ActivityLog from './ActivityLog';\r\nimport PlatformDetails from './PlatformDetails';\r\nimport useFacebookSDK from '../hooks/useFacebookSDK';\r\nimport { createSocialPlatforms, WEBHOOK_URL } from '../constants/socialPlatforms';\r\nimport './SocialMediaPage.css';\r\n\r\nfunction SocialMediaPage() {\r\n  const navigate = useNavigate();\r\n  const [selectedPlatform, setSelectedPlatform] = useState(null);\r\n  const [facebookConnected, setFacebookConnected] = useState(false);\r\n  const [postData, setPostData] = useState({\r\n    message: '',\r\n    image: null,\r\n    autoReplyComment: false,\r\n    autoDMResponse: false\r\n  });\r\n  const [activityLog, setActivityLog] = useState([]);\r\n  const [isCardFlipped, setIsCardFlipped] = useState(false);\r\n\r\n  // Initialize Facebook SDK\r\n  useFacebookSDK();\r\n\r\n  const socialPlatforms = createSocialPlatforms(facebookConnected);\r\n\r\n  const addActivity = (action, status) => {\r\n    setActivityLog(prev => [...prev, {\r\n      time: new Date().toLocaleString(),\r\n      action,\r\n      status\r\n    }]);\r\n  };\r\n\r\n  const handleFacebookConnect = () => {\r\n    setIsCardFlipped(true);\r\n  };\r\n\r\n  const handleFacebookLogin = async () => {\r\n    try {\r\n      const connectData = new FormData();\r\n      connectData.append('action', 'connect_facebook');\r\n      connectData.append('platform', 'facebook');\r\n      \r\n      const webhookResponse = await fetch(WEBHOOK_URL, {\r\n        method: 'POST',\r\n        body: connectData\r\n      });\r\n      \r\n      if (webhookResponse.ok) {\r\n        setFacebookConnected(true);\r\n        setIsCardFlipped(false);\r\n        addActivity('Connected to Facebook via Make.com webhook', 'success');\r\n      } else {\r\n        throw new Error('Webhook connection failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Facebook connection failed:', error);\r\n      addActivity('Facebook connection failed', 'error');\r\n    }\r\n  };\r\n\r\n  const handlePlatformConnect = (platformId) => {\r\n    if (platformId === 'facebook') {\r\n      handleFacebookLogin();\r\n    } else {\r\n      // Handle other platform connections\r\n      addActivity(`${platformId} connection initiated`, 'success');\r\n    }\r\n  };\r\n\r\n  const selectedPlatformData = socialPlatforms.find(p => p.id === selectedPlatform);\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <header className=\"page-header\">\r\n        <button onClick={() => navigate('/')} className=\"back-btn\">\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <polyline points=\"15,18 9,12 15,6\"></polyline>\r\n          </svg>\r\n          Back to Dashboard\r\n        </button>\r\n        <div className=\"page-title-section\">\r\n          <h1 className=\"page-title\">Social Media Automation</h1>\r\n          <p className=\"page-subtitle\">Connect and automate your social media platforms with advanced AI-powered features</p>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"page-main\">\r\n        <div className=\"platforms-container\">\r\n          <div className=\"platforms-grid\">\r\n            {socialPlatforms.map((platform) => (\r\n              <PlatformCard\r\n                key={platform.id}\r\n                platform={platform}\r\n                isSelected={selectedPlatform === platform.id}\r\n                isFlipped={platform.id === 'facebook' && isCardFlipped}\r\n                onSelect={setSelectedPlatform}\r\n                onConnect={handlePlatformConnect}\r\n                onFlip={handleFacebookConnect}\r\n                postData={postData}\r\n                setPostData={setPostData}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <ActivityLog activityLog={activityLog} />\r\n\r\n        {selectedPlatform && selectedPlatformData && (\r\n          <PlatformDetails\r\n            platform={selectedPlatformData}\r\n            onClose={() => setSelectedPlatform(null)}\r\n          />\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SocialMediaPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}